name: 🛠️ Flutter Multi-Build & Telegram Release
description: Build Flutter APKs/AABs/Web, send to GitHub Releases & Telegram.
author: Afnan Afsal

inputs:
  telegram_token:
    description: 'Telegram Bot Token'
    required: true
  telegram_chat_id:
    description: 'Telegram Chat ID or Group ID'
    required: true
  github_token:
    description: 'GitHub Token for release'
    required: true
  flutter_version:
    description: 'Flutter version'
    default: '3.19.0'
  java_version:
    description: 'Java version'
    default: '17'
  build_mode:
    description: 'Build mode: apk | aab | web'
    default: 'apk'

runs:
  using: "composite"
  steps:
    - name: 📁 Checkout
      uses: actions/checkout@v4

    - name: ☕ Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ inputs.java_version }}

    - name: 🎯 Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ inputs.flutter_version }}

    - name: 📦 Cache Flutter
      uses: actions/cache@v3
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}

    - name: 📊 Auto-increment version
      shell: bash
      run: |
        set -e
        echo "🔄 Incrementing version..."
        VERSION_LINE=$(grep '^version: ' pubspec.yaml)
        VERSION_NAME=$(echo $VERSION_LINE | cut -d "+" -f1 | cut -d " " -f2)
        VERSION_CODE=$(echo $VERSION_LINE | cut -d "+" -f2)
        NEW_CODE=$((VERSION_CODE + 1))
        NEW_VERSION="${VERSION_NAME}+${NEW_CODE}"
        sed -i "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml
        echo "✅ Version updated to $NEW_VERSION"

    - name: 📥 Install dependencies
      shell: bash
      run: flutter pub get

    - name: 🔨 Build Flutter ${{ inputs.build_mode | upper }}
      shell: bash
      run: |
        set -e
        echo "🏗️ Building for mode: ${{ inputs.build_mode }}"
        if [[ "${{ inputs.build_mode }}" == "apk" ]]; then
          flutter build apk --split-per-abi --release
        elif [[ "${{ inputs.build_mode }}" == "aab" ]]; then
          flutter build appbundle --release
        elif [[ "${{ inputs.build_mode }}" == "web" ]]; then
          flutter build web
        else
          echo "❌ Invalid build_mode provided."
          exit 1
        fi

    - name: 🚀 Release to GitHub
      uses: ncipollo/release-action@v1
      with:
        tag: v${{ github.run_number }}
        name: "Build ${{ github.run_number }}"
        token: ${{ inputs.github_token }}
        body: |
          ### 🔖 Release Notes
          - Auto-built by GitHub Action
          - Version: `${{ github.run_number }}`
          - Triggered by: `${{ github.actor }}`
        artifacts: |
          build/app/outputs/flutter-apk/*.apk
          build/app/outputs/bundle/release/*.aab

    - name: 📤 Send to Telegram
      shell: bash
      run: |
        echo "📡 Sending Telegram message..."
        curl -s -X POST https://api.telegram.org/bot${{ inputs.telegram_token }}/sendMessage \
          -d chat_id=${{ inputs.telegram_chat_id }} \
          -d text="🛠️ *Build Started*: \`${{ github.repository }}\` by \`${{ github.actor }}\`" \
          -d parse_mode=Markdown

        echo "📦 Sending APK/AAB..."
        FILES=$(find build/app/outputs/ -type f \( -name "*.apk" -o -name "*.aab" \))
        for file in $FILES; do
          curl -s -F chat_id=${{ inputs.telegram_chat_id }} \
               -F document=@"$file" \
               -F caption="📤 *Flutter Release File*\n📁 ${file}" \
               -F parse_mode=Markdown \
               https://api.telegram.org/bot${{ inputs.telegram_token }}/sendDocument
        done
